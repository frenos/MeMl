import math
import numpy as np
from collections import Counter
import sys

class Tree:

    def __init__(self):
        self.theta = 0.1

    def prob(self, data_set, attribute):
        attribute_count = 0

        if len(data_set) == 0:
            return None

        attribute_count = 1

        return attribute_count


    def _entropy(self, data_set):

        entropy = 0

        if len(data_set) == 0:
            return None

        if len(data_set) == 1:
            return 0

        return 1

        counter = Counter(data_set)
        print(counter)
        try:
            for x in range(len(data_set)-1):
                p = self.prob(data_set, attribute)
                entropy += -1*p*math.log(p ,2)
        except ValueError as e:
            print(e.message)

        return entropy

    def generate(self, data_set):
        print('generate')

        if self._entropy(data_set) < self.theta:
            print('create leaf')

        best_feature = self._split(data_set)

        branches = self._distinct_feature_vec(data_set[:,best_feature])

        for x in branches:
            new_data_set = []
            for y in data_set:
                if y[best_feature] == x:
                    new_data_set.append(y)

            self.generate(new_data_set)


    def _split(self, data_set):
        print('split')
        best_feature = 0
        impurity_min = sys.maxsize

        anz_feature = len(data_set[0])-1

        for i in range(anz_feature):
            feature_vec = data_set[:, i]
            impurity_new = self._splitEntropy(feature_vec)
            if impurity_new < impurity_min:
                impurity_min = impurity_new
                best_feature = i

        return best_feature


    def _distinct_feature_vec(self, vec):
        return list(set(vec))


def test():
    tree = Tree()
    trainSet = np.array([[2, 11, 1], [7, 4, -1], [7, 3, -1], [9, 3, -1], [9, 6, 1], [3, 9, 1], [3, 1, -1]])
    tree.generate(trainSet)
    '''
    print(tree.entropy(data_set=trainSet))
    feature_vec = trainSet[:,1]
    print(list(set(feature_vec)))
    print(tree.entropy(feature_vec))
    counter = Counter(feature_vec)
    print(counter.most_common())
    '''
test()
